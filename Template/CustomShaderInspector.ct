// Copyright © 2019 shiranui_isuzu. All rights reserved.
// https://twitter.com/Shiranui_Isuzu_

using System;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;
using NUnit.Framework;
using UnityEditor;
using UnityEngine;

///<inheritdoc />
/// このクラスは<#=generatorName#>により
/// <#=dateTimeNow#>に自動生成されました。
/// このファイルをエディタで直接編集しないでください。
/// </summary>
public class <#=className#> : ShaderGUI
{
    #region Fields
<#fields#>

    private bool renderingFold        = false;
    private bool firstInspectedEditor = true;
    #endregion

    public <#=className#>()
    {
    }

    ///<inheritdoc />
    public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties)
    {
        Undo.undoRedoPerformed += () => { materialEditor.Repaint(); };

        var material = materialEditor.target as Material;

        if (material == null) return;

        if (materialEditor.isVisible)
        {
            using (new GUILayout.HorizontalScope())
            {
                if (GUILayout.Button("Copy Values"))
                {
                    SaveMaterialProperties(material);
                }

                if (GUILayout.Button("Past Values"))
                {
                    LoadMaterialProperties(material);
                    materialEditor.PropertiesChanged();
                }
            }

            using (new GUILayout.HorizontalScope())
            {
                if (GUILayout.Button("Export Template"))
                {
                    SaveTemplateData(material);
                }

                if (GUILayout.Button("Import Template"))
                {
                    LoadTemplateData(material);
                    materialEditor.PropertiesChanged();
                }
            }

            GUILayout.Space(5);
        }

<#findProps#>

        using(var scope = new EditorGUI.ChangeCheckScope())
        {
            if(this.firstInspectedEditor)
            {
<#initialToggle#>
                this.firstInspectedEditor = false;
            }

<#setKeywords#>

            materialEditor.SetDefaultGUIWidths();

<#propGroup#>

            UiUtils.PropertyFoldGroup("Other", ref this.renderingFold, () =>
            {
                materialEditor.RenderQueueField();
#if UNITY_5_6_OR_NEWER
                materialEditor.EnableInstancingField();
#endif
#if UNITY_5_6_2 || UNITY_5_6_3 || UNITY_5_6_4 || UNITY_2017_1_OR_NEWER
                materialEditor.DoubleSidedGIField();
#endif
                materialEditor.LightmapEmissionProperty();
            });
        }
    }

    private static void LoadMaterialProperties(Material material)
    {
        Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
        var data = EditorPrefs.GetString("<#=guid#>", string.Empty);
        if (string.IsNullOrEmpty(data)) return;

        var properties = data.Split(';');

        try
        {
            for (var i = 0; i < properties.Length; i++)
            {
                var values = properties[i].Split(':');
                if (values.Length != 3) return;
                if(!material.HasProperty(values[0])) return;

                var type = (ShaderUtil.ShaderPropertyType) Enum.Parse(typeof(ShaderUtil.ShaderPropertyType), values[1]);

                switch (type)
                {
                    case ShaderUtil.ShaderPropertyType.Color:
                        var colors = values[2].Split(',');
                        if(colors.Length != 4) break;
                        material.SetColor(values[0], new Color
                        (
                            Convert.ToSingle(colors[0]),
                            Convert.ToSingle(colors[1]),
                            Convert.ToSingle(colors[2]),
                            Convert.ToSingle(colors[3])
                        ));
                        break;
                    case ShaderUtil.ShaderPropertyType.Vector:
                        var vectors = values[2].Split(',');
                        if (vectors.Length != 4) break;
                        material.SetVector(values[0], new Color
                        (
                            Convert.ToSingle(vectors[0]),
                            Convert.ToSingle(vectors[1]),
                            Convert.ToSingle(vectors[2]),
                            Convert.ToSingle(vectors[3])
                        ));
                        break;
                    case ShaderUtil.ShaderPropertyType.Float:
                        material.SetFloat(values[0], Convert.ToSingle(values[2]));
                        break;
                    case ShaderUtil.ShaderPropertyType.Range:
                        material.SetFloat(values[0], Convert.ToSingle(values[2]));
                        break;
                    case ShaderUtil.ShaderPropertyType.TexEnv:
                        var testures = values[2].Split(',');
                        if(testures.Length != 5) break;
                        material.SetTexture(values[0], AssetDatabase.LoadAssetAtPath<Texture>(testures[0]));
                        material.SetTextureOffset(values[0], new Vector2
                        (
                            Convert.ToSingle(testures[1]),
                            Convert.ToSingle(testures[2])
                        ));
                        material.SetTextureScale(values[0], new Vector2
                        (
                            Convert.ToSingle(testures[3]),
                            Convert.ToSingle(testures[4])
                        ));
                        break;
                }
            }
        }
        catch (Exception e)
        {
            Debug.LogException(e);
        }
        Thread.CurrentThread.CurrentCulture = CultureInfo.CurrentUICulture;
    }

    private static void SaveMaterialProperties(Material material)
    {
        Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
        var shader = material.shader;
        var propertyCount = ShaderUtil.GetPropertyCount(shader);
        var data = string.Empty;

        for (var i = 0; i < propertyCount; i++)
        {
            var type = ShaderUtil.GetPropertyType(shader, i);
            var name = ShaderUtil.GetPropertyName(shader, i);
            var value = string.Empty;
            switch (type)
            {
                case ShaderUtil.ShaderPropertyType.Color:
                    var color = material.GetColor(name);
                    value = string.Format("{0},{1},{2},{3}", color.r, color.g, color.b, color.a);
                    break;
                case ShaderUtil.ShaderPropertyType.Vector:
                    var vector = material.GetVector(name);
                    value = string.Format("{0},{1},{2},{3}", vector.x, vector.y, vector.z, vector.w);
                    break;
                case ShaderUtil.ShaderPropertyType.Float:
                    value = material.GetFloat(name).ToString();
                    break;
                case ShaderUtil.ShaderPropertyType.Range:
                    value = material.GetFloat(name).ToString();
                    break;
                case ShaderUtil.ShaderPropertyType.TexEnv:
                    var texture = material.GetTexture(name);
                    value = AssetDatabase.GetAssetPath(texture);
                    var offset = material.GetTextureOffset(name);
                    var scale = material.GetTextureScale(name);
                    value += string.Format(",{0},{1},{2},{3}", offset.x, offset.y, scale.x, scale.y);
                    break;
            }

            data += string.Format("{0}:{1}:{2}", name, type, value);

            if (i < propertyCount - 1) data += ";";
        }

        EditorPrefs.SetString("<#=guid#>", data);
        Thread.CurrentThread.CurrentCulture = Thread.CurrentThread.CurrentUICulture;
    }

        private static void SaveTemplateData(Material material)
        {
        Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
        var shader = material.shader;
        var propertyCount = ShaderUtil.GetPropertyCount(shader);
        var data = string.Empty;

        for (var i = 0; i < propertyCount; i++)
        {
            var type = ShaderUtil.GetPropertyType(shader, i);
            var name = ShaderUtil.GetPropertyName(shader, i);
            var value = string.Empty;
            switch (type)
            {
                case ShaderUtil.ShaderPropertyType.Color:
                    var color = material.GetColor(name);
                    value = string.Format("{0},{1},{2},{3}", color.r, color.g, color.b, color.a);
                    break;
                case ShaderUtil.ShaderPropertyType.Vector:
                    var vector = material.GetVector(name);
                    value = string.Format("{0},{1},{2},{3}", vector.x, vector.y, vector.z, vector.w);
                    break;
                case ShaderUtil.ShaderPropertyType.Float:
                    value = material.GetFloat(name).ToString();
                    break;
                case ShaderUtil.ShaderPropertyType.Range:
                    value = material.GetFloat(name).ToString();
                    break;
                case ShaderUtil.ShaderPropertyType.TexEnv:
                    var texture = material.GetTexture(name);
                    value = AssetDatabase.GetAssetPath(texture);
                    var offset = material.GetTextureOffset(name);
                    var scale = material.GetTextureScale(name);
                    value += string.Format(",{0},{1},{2},{3}", offset.x, offset.y, scale.x, scale.y);
                    break;
            }

            data += string.Format("{0}:{1}:{2}", name, type, value);


            if (i < propertyCount - 1) data += ";";
        }

        EditorPrefs.SetString("<#=guid#>", data);

        var filePath = EditorUtility.SaveFilePanel("Create New Isuzu Shader Template", Application.dataPath, "New IsuzuShaderTemplate", "shadertemp");

        if (string.IsNullOrEmpty(filePath)) return;

        using (var writer = new StreamWriter(filePath, false))
        {
            writer.Write(data);
            writer.Flush();
            writer.Close();
        }

            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();

        Thread.CurrentThread.CurrentCulture = Thread.CurrentThread.CurrentUICulture;
        }

    private static void LoadTemplateData(Material material)
    {
        Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;

        var filePath = EditorUtility.OpenFilePanel("Select Isuzu Shader Template", Application.dataPath, "shadertemp");
        if (string.IsNullOrEmpty(filePath)) return;

        var data = string.Empty;
        using (var sr = new StreamReader(filePath))
        {
            data = sr.ReadToEnd();
            sr.Close();
        }

        if (string.IsNullOrEmpty(data)) return;

        var properties = data.Split(';');

        try
        {
            for (var i = 0; i < properties.Length; i++)
            {
                var values = properties[i].Split(':');
                if (values.Length != 3) return;
                if (!material.HasProperty(values[0])) return;

                var type = (ShaderUtil.ShaderPropertyType)Enum.Parse(typeof(ShaderUtil.ShaderPropertyType), values[1]);

                switch (type)
                {
                    case ShaderUtil.ShaderPropertyType.Color:
                        var colors = values[2].Split(',');
                        if (colors.Length != 4) break;
                        material.SetColor(values[0], new Color
                        (
                            Convert.ToSingle(colors[0]),
                            Convert.ToSingle(colors[1]),
                            Convert.ToSingle(colors[2]),
                            Convert.ToSingle(colors[3])
                        ));
                        break;
                    case ShaderUtil.ShaderPropertyType.Vector:
                        var vectors = values[2].Split(',');
                        if (vectors.Length != 4) break;
                        material.SetVector(values[0], new Color
                        (
                            Convert.ToSingle(vectors[0]),
                            Convert.ToSingle(vectors[1]),
                            Convert.ToSingle(vectors[2]),
                            Convert.ToSingle(vectors[3])
                        ));
                        break;
                    case ShaderUtil.ShaderPropertyType.Float:
                        material.SetFloat(values[0], Convert.ToSingle(values[2]));
                        break;
                    case ShaderUtil.ShaderPropertyType.Range:
                        material.SetFloat(values[0], Convert.ToSingle(values[2]));
                        break;
                    case ShaderUtil.ShaderPropertyType.TexEnv:
                        var testures = values[2].Split(',');
                        if (testures.Length != 5) break;
                        material.SetTexture(values[0], AssetDatabase.LoadAssetAtPath<Texture>(testures[0]));
                        material.SetTextureOffset(values[0], new Vector2
                        (
                            Convert.ToSingle(testures[1]),
                            Convert.ToSingle(testures[2])
                        ));
                        material.SetTextureScale(values[0], new Vector2
                        (
                            Convert.ToSingle(testures[3]),
                            Convert.ToSingle(testures[4])
                        ));
                        break;
                }
            }
        }
        catch (Exception e)
        {
            Debug.LogException(e);
        }
        Thread.CurrentThread.CurrentCulture = CultureInfo.CurrentUICulture;
    }
}


